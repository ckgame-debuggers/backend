name: deploy

on:
  push:
    branches:
      - main
jobs:
  AUTO_DEPLOY:
    runs-on: ubuntu-latest
    environment: prod

    steps:
      - uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_ACCESS_SECRET }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set environment variables
        run: |
          touch .env
          echo "NODE_ENV=prod" >> .env
          echo "PORT=8000" >> .env
          echo "JWT_SECRET='${{ secrets.JWT_SECRET }}'" >> .env
          echo "JWT_ACCESS_EXPIRES_IN='${{ secrets.JWT_ACCESS_EXPIRES_IN }}'" >> .env
          echo "JWT_REFRESH_SECRET='${{ secrets.JWT_REFRESH_SECRET }}'" >> .env
          echo "JWT_REFRESH_EXPIRATION_TIME='${{ secrets.JWT_REFRESH_EXPIRATION_TIME }}'" >> .env
          echo "DATABASE_URL='${{ secrets.DATABASE_URL }}'" >> .env
          echo "DATABASE_PORT=${{ secrets.DATABASE_PORT }}" >> .env
          echo "DATABASE_NAME='${{ secrets.DATABASE_NAME }}'" >> .env
          echo "DATABASE_USER='${{ secrets.DATABASE_USER }}'" >> .env
          echo "DATABASE_PASSWORD='${{ secrets.DATABASE_PASSWORD }}'" >> .env
          echo "MAIL_HOST='${{ secrets.MAIL_HOST }}'" >> .env
          echo "MAIL_PORT=${{ secrets.MAIL_PORT }}" >> .env
          echo "MAIL_USER='${{ secrets.MAIL_USER }}'" >> .env
          echo "MAIL_PASS='${{ secrets.MAIL_PASS }}'" >> .env
          echo "MAIL_FROM='${{ secrets.MAIL_FROM }}'" >> .env
          echo "FRONT_URL='${{ secrets.FRONT_URL }}'" >> .env
          echo "Environment variables created:"
          cat .env

      - name: Install dependencies
        run: npm install dotenv

      - name: Check environment variables
        run: node scripts/check-env.js

      - name: Build application
        run: npm run build

      - name: Create deployment package
        run: |
          # Make scripts executable
          chmod +x scripts/*.sh

          # Create deployment package from dist folder
          cd dist
          # Copy scripts folder to dist
          cp -r ../scripts .
          # Copy appspec.yml to dist
          cp ../appspec.yml .
          # Copy package.json to dist
          cp ../package.json .
          # Copy pnpm-lock.yaml to dist
          cp ../pnpm-lock.yaml .

          # Create deployment package from dist
          zip -r ../deploy.zip . -x "*.git*" "node_modules/*"
          cd ..

          # Verify package contents
          echo "=== Deployment package contents ==="
          unzip -l deploy.zip | grep -E "(appspec\.yml|scripts/.*\.sh)"
          echo "=== All scripts in package ==="
          unzip -l deploy.zip | grep "scripts/"
          echo "=== Package size ==="
          ls -lh deploy.zip
          echo "=== Testing package extraction ==="
          mkdir -p test-extract
          unzip -q deploy.zip -d test-extract
          ls -la test-extract/scripts/
          rm -rf test-extract

      - name: Upload to S3
        run: |
          aws s3 cp deploy.zip s3://${{ secrets.AWS_S3_BUCKET }}/deploy.zip

      - name: Deploy to AWS CodeDeploy
        id: deploy
        run: |
          DEPLOYMENT_ID=$(aws deploy create-deployment \
            --application-name ${{ secrets.AWS_CODEDEPLOY_APP_NAME }} \
            --deployment-group-name ${{ secrets.AWS_CODEDEPLOY_GROUP_NAME }} \
            --s3-location bucket=${{ secrets.AWS_S3_BUCKET }},bundleType=zip,key=deploy.zip \
            --file-exists-behavior OVERWRITE \
            --query 'deploymentId' \
            --output text)
          echo "deployment_id=$DEPLOYMENT_ID" >> $GITHUB_OUTPUT
          echo "Deployment ID: $DEPLOYMENT_ID"

      - name: Wait for deployment completion
        run: |
          DEPLOYMENT_ID=${{ steps.deploy.outputs.deployment_id }}
          echo "Waiting for deployment $DEPLOYMENT_ID to complete..."

          # Wait for deployment to start
          sleep 30

          # Check deployment status every 30 seconds for up to 10 minutes
          for i in {1..20}; do
            STATUS=$(aws deploy get-deployment \
              --deployment-id $DEPLOYMENT_ID \
              --query 'deploymentInfo.status' \
              --output text)
            
            echo "Deployment status: $STATUS"
            
            if [ "$STATUS" = "Succeeded" ]; then
              echo "✅ Deployment completed successfully!"
              break
            elif [ "$STATUS" = "Failed" ] || [ "$STATUS" = "Stopped" ]; then
              echo "❌ Deployment failed with status: $STATUS"
              
              # Get deployment details for debugging
              aws deploy get-deployment --deployment-id $DEPLOYMENT_ID
              
                           # Get deployment logs
             echo "=== Deployment logs ==="
             aws deploy get-deployment-target \
               --deployment-id $DEPLOYMENT_ID \
               --target-id $DEPLOYMENT_ID
             
             # Get deployment details
             echo "=== Deployment details ==="
             aws deploy get-deployment --deployment-id $DEPLOYMENT_ID
             
             
             # Get deployment events with more details
             echo "=== Deployment events with details ==="
             aws deploy get-deployment \
               --deployment-id $DEPLOYMENT_ID \
               --query 'deploymentInfo.deploymentOverview' \
               --output table
             
             # Get deployment events
             echo "Deployment events:"
             aws deploy get-deployment \
               --deployment-id $DEPLOYMENT_ID \
               --query 'deploymentInfo.deploymentOverview' \
               --output table
              
              exit 1
            fi
            
            sleep 30
          done

          if [ "$STATUS" != "Succeeded" ]; then
            echo "❌ Deployment timed out or failed"
            exit 1
          fi
